<endpoints>
  <homology_symbol>
    description=Retrieves homology information (orthologs) by symbol
    endpoint=homology/symbol/:species/:symbol
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=orthoxml
    <params>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <symbol>
        type=String
        description=Symbol or display name of a gene
        example=__VAR(gene_symbol)__
        required=1
      </symbol>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <external_db>
        type=String
        description=Filter by external database
        example=__VAR(gene_symbol_db)__
      </external_db>
      <format>
        type=Enum(full,condensed)
        description=Layout of the response
        default=__VAR(compara_hom_format)__
      </format>
      <type>
        type=Enum(orthologues, paralogues, projections, all)
        description=The type of homology to return from this call. Projections are orthology calls defined between alternative assemblies and the genes shared between them. Useful if you need only one type of homology back from the service
        default=__VAR(compara_hom_type)__
      </type>
      <target_species>
        type=String
        description=Filter by species. Supports all species aliases
        example=__VAR(species)__
        example=__VAR(species_common)__
      </target_species>
      <target_taxon>
        type=Integer
        description=Filter by taxon
        example=__VAR(taxon)__
        example=__VAR(target_taxon)__
      </target_taxon>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=__VAR(compara_aligned)__
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=__VAR(compara_sequence)__
      </sequence>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=__VAR(compara_cigar_line)__
      </cigar_line>
    </params>
    <examples>
      <basic>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol)__
        content=application/json
      </basic>
      <orthoxml>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol)__
        content=text/x-orthoxml+xml
      </orthoxml>
      <format_xml>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol)__
        content=text/xml
        <params>
          type=orthologues
          format=condensed
        </params>
      </format_xml>
      <format_limits>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol)__
        content=application/json
        <params>
          type=orthologues
          format=condensed
          target_taxon=__VAR(target_taxon)__
          target_species=__VAR(target_species)__
        </params>
      </format_limits>
      <format_limits_cdna>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol)__
        content=application/json
        <params>
          type=orthologues
          target_taxon=__VAR(target_taxon)__
          target_species=__VAR(target_species)__
          sequence=cdna
        </params>
      </format_limits_cdna>
    </examples>
  </homology_symbol>
  <homology_ensemblgene>
    description=Retrieves homology information (orthologs) by Ensembl gene id
    endpoint=homology/id/:id
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=orthoxml
    <params>
      <id>
        type=String
        description=An Ensembl stable ID
        example=__VAR(gene_stable_id)__
        required=1
      </id>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <format>
        type=Enum(full, condensed)
        description=Layout of the response
        default=__VAR(compara_hom_format)__
      </format>
      <type>
        type=Enum(orthologues, paralogues, projections, all)
        description=The type of homology to return from this call. Projections are orthology calls defined between alternative assemblies and the genes shared between them. Useful if you need only one type of homology back from the service
        default=__VAR(compara_hom_type)__
      </type>
      <target_species>
        type=String
        description=Filter by species. Supports all species aliases
        example=__VAR(species_common)__
        example=__VAR(target_species)__
      </target_species>
      <target_taxon>
        type=Integer
        description=Filter by taxon
        example=__VAR(taxon)__
        example=__VAR(target_taxon)__
      </target_taxon>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=__VAR(compara_aligned)__
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=__VAR(compara_sequence)__
      </sequence>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=__VAR(compara_cigar_line)__
      </cigar_line>
    </params>
    <examples>
      <basic>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
      </basic>
      <orthoxml>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        content=text/x-orthoxml+xml
      </orthoxml>
      <compara_xml>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        <params>
          compara=__VAR(compara)__
        </params>
        content=text/xml
      </compara_xml>
      <format_xml>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        content=text/xml
        <params>
          type=orthologues
          format=condensed
        </params>
      </format_xml>
      <orthoxml_limits>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        content=text/x-orthoxml+xml
        <params>
          type=orthologues
          target_taxon=__VAR(target_taxon)__
        </params>
      </orthoxml_limits>
      <format_limits_cdna>
        path=/homology/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
        <params>
          type=orthologues
          target_taxon=__VAR(target_taxon)__
          target_species=__VAR(target_species)__
          sequence=cdna
        </params>
      </format_limits_cdna>
    </examples>
  </homology_ensemblgene>
  <family>
    description=Retrieves a family information using the family stable identifier
    endpoint=family/id/:id
    method=GET
    group=Comparative Genomics
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl family ID
        example=__VAR(family_stable_id)__
        required=1
      </id>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions). Note: If aligned=1, this will override sequence=none
        default=1
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned. Note: dependant on the setting for "aligned", If aligned=1, this will override sequence=none
        default=protein
      </sequence>
      <member_source>
        type=Enum(all, ensembl, uniprot)
        description=The source of the family members that you want returned
        default=all
      </member_source>
    </params>
    <examples>
      <json>
        path=/family/id/
        capture=__VAR(family_stable_id)__
        content=application/json
      </json>
    </examples>
  </family>
  <family_member_id>
    description=Retrieves the information for all the families that contains the gene / transcript / translation stable identifier
    endpoint=family/member/id/:id
    method=GET
    group=Comparative Genomics
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl stable ID
        example=__VAR(compara_gene_stable_id)__
        required=1
      </id>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions). Note: If aligned=1, this will override sequence=none
        default=1
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned. Note: dependant on the setting for "aligned", If aligned=1, this will override sequence=none
        default=protein
      </sequence>
      <member_source>
        type=Enum(all, ensembl, uniprot)
        description=The source of the family members that you want returned
        default=all
      </member_source>
    </params>
    <examples>
      <json>
        path=/family/member/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
      </json>
    </examples>
  </family_member_id>
  <family_member_symbol>
    description=Retrieves the information for all the families that contains the gene identified by a symbol
    endpoint=family/member/symbol/:species/:symbol
    method=GET
    group=Comparative Genomics
    output=json
    <params>
      <symbol>
        type=String
        description=Symbol or display name of a gene
        example=__VAR(gene_symbol)__
        required=1
      </symbol>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions). Note: If aligned=1, this will override sequence=none
        default=1
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned. Note: dependant on the setting for "aligned", If aligned=1, this will override sequence=none
        default=protein
      </sequence>
      <member_source>
        type=Enum(all, ensembl, uniprot)
        description=The source of the family members that you want returned
        default=all
      </member_source>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        default=core
        example=core
        example=otherfeatures
      </db_type>
      <external_db>
        type=String
        description=Filter by external database
        example=__VAR(gene_symbol_db)__
      </external_db>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
    </params>
    <examples>
      <json>
        path=/family/member/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=application/json
      </json>
    </examples>
  </family_member_symbol>
  <genetree>
    description=Retrieves a gene tree for a gene tree stable identifier
    endpoint=genetree/id/:id
    method=GET
    group=Comparative Genomics
    output=phyloxml
    output=orthoxml
    output=nh
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl genetree ID
        example=__VAR(genetree_stable_id)__
        required=1
      </id>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=0
      </aligned>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=0
      </cigar_line>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=protein
      </sequence>
      <nh_format>
        type=Enum(full, display_label_composite, simple, species, species_short_name, ncbi_taxon, ncbi_name, njtree, phylip)
        description=The format of a NH (New Hampshire) request.
        default=simple
      </nh_format>
      <prune_species>
        type=String
        description=Prune the tree by species. Supports all species aliases. Will return a tree with only the species given
        example=__VAR(species_common)__
        example=__VAR(target_species)__
      </prune_species>
      <prune_taxon>
        type=Integer
        description=Prune the tree by taxon. Will return a tree with only the taxons given
        example=__VAR(taxon)__
        example=__VAR(target_taxon)__
      </prune_taxon>
      <clusterset_id>
        type=String
        description=Name of the gene-tree resource being queried. Common values are "default" for the standard multi-clade trees (which exclude all non-reference strains) and "murinae" for the trees spanning all mouse strains. By default, the most inclusive analysis will be selected
	example=default
        example=murinae
      </clusterset_id>
    </params>
    <examples>
      <phyloxml>
        path=/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=text/x-phyloxml+xml
      </phyloxml>
      <phyloxml_cdna>
        path=/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=text/x-phyloxml+xml
        <params>
          sequence=cdna
          aligned=1
        </params>
      </phyloxml_cdna>
      <orthoxml_none>
        path=/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=text/x-orthoxml+xml
      </orthoxml_none>
      <nh>
        path=/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=text/x-nh
        <params>
          nh_format=simple
          prune_taxon=__VAR(target_ancestral_taxon)__
          prune_species=__VAR(target_species)__
        </params>
      </nh>
      <json>
        path=/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=application/json
      </json>
    </examples>
  </genetree>
  <genetree_member_id>
    description=Retrieves the gene tree that contains the gene / transcript / translation stable identifier
    endpoint=genetree/member/id/:id
    method=GET
    group=Comparative Genomics
    output=phyloxml
    output=orthoxml
    output=nh
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl stable ID
        example=__VAR(compara_gene_stable_id)__
        required=1
      </id>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
      </species>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        example=core
      </db_type>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=0
      </aligned>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=0
      </cigar_line>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=protein
      </sequence>
      <nh_format>
        type=Enum(full, display_label_composite, simple, species, species_short_name, ncbi_taxon, ncbi_name, njtree, phylip)
        description=The format of a NH (New Hampshire) request.
        default=simple
      </nh_format>
      <prune_species>
        type=String
        description=Prune the tree by species. Supports all species aliases. Will return a tree with only the species given
        example=__VAR(species_common)__
        example=__VAR(target_species)__
      </prune_species>
      <prune_taxon>
        type=Integer
        description=Prune the tree by taxon. Will return a tree with only the taxons given
        example=__VAR(taxon)__
        example=__VAR(target_taxon)__
      </prune_taxon>
      <clusterset_id>
        type=String
        description=Name of the gene-tree resource being queried. Common values are "default" for the standard multi-clade trees (which exclude all non-reference strains) and "murinae" for the trees spanning all mouse strains. By default, the most inclusive analysis will be selected
	example=default
        example=murinae
      </clusterset_id>
    </params>
    <examples>
      <phyloxml>
        path=/genetree/member/id/
        capture=__VAR(compara_gene_stable_id)__
        content=text/x-phyloxml+xml
        <params>
          prune_taxon=__VAR(target_ancestral_taxon)__
          prune_species=__VAR(target_species)__
        </params>
      </phyloxml>
      <json>
        path=/genetree/member/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
      </json>
    </examples>
  </genetree_member_id>
  <genetree_member_symbol>
    description=Retrieves the gene tree that contains the gene identified by a symbol
    endpoint=genetree/member/symbol/:species/:symbol
    method=GET
    group=Comparative Genomics
    output=phyloxml
    output=orthoxml
    output=nh
    output=json
    <params>
      <symbol>
        type=String
        description=Symbol or display name of a gene
        example=__VAR(gene_symbol)__
        required=1
      </symbol>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        default=core
        example=core
        example=otherfeatures
      </db_type>
      <external_db>
        type=String
        description=Filter by external database
        example=__VAR(gene_symbol_db)__
      </external_db>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=0
      </aligned>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=0
      </cigar_line>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=protein
      </sequence>
      <nh_format>
        type=Enum(full, display_label_composite, simple, species, species_short_name, ncbi_taxon, ncbi_name, njtree, phylip)
        description=The format of a NH (New Hampshire) request.
        default=simple
      </nh_format>
      <prune_species>
        type=String
        description=Prune the tree by species. Supports all species aliases. Will return a tree with only the species given
        example=__VAR(species_common)__
        example=__VAR(target_species)__
      </prune_species>
      <prune_taxon>
        type=Integer
        description=Prune the tree by taxon. Will return a tree with only the taxons given
        example=__VAR(taxon)__
        example=__VAR(target_taxon)__
      </prune_taxon>
      <clusterset_id>
        type=String
        description=Name of the gene-tree resource being queried. Common values are "default" for the standard multi-clade trees (which exclude all non-reference strains) and "murinae" for the trees spanning all mouse strains. By default, the most inclusive analysis will be selected
	example=default
        example=murinae
      </clusterset_id>
    </params>
    <examples>
      <phyloxml>
        path=/genetree/member/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=text/x-phyloxml+xml
      </phyloxml>
      <orthoxml_none>
        path=/genetree/member/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=text/x-orthoxml+xml
        <params>
          prune_taxon=__VAR(target_ancestral_taxon)__
          prune_species=__VAR(target_species)__
        </params>
      </orthoxml_none>
    </examples>
  </genetree_member_symbol>
  <genomic_alignment_region>
    description=Retrieves genomic alignments as separate blocks based on a region and species
    endpoint=alignment/region/:species/:region
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=phyloxml
    <params>
      <region>
        type=String
        description=Query region. A maximum of 10Mb is allowed to be requested at any one time
        example=__VAR(sequence_region)__
        example=__VAR(sequence_region_negative)__
        example=__VAR(sequence_region_strandless)__
        required=1
      </region>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <aligned>
        type=Boolean
	description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
	default=__VAR(compara_aligned)__
      </aligned>
      <mask>
        type=Enum(hard,soft)
        description=Request the sequence masked for repeat sequences. Hard will mask all repeats as N's and soft will mask repeats as lowercased characters. 
        example=hard
      </mask> 
      <species_set_group>
        type=String
        description=The species set group name of the multiple alignment. Should not be used with the species_set parameter. Use <a href="/documentation/info/compara_species_sets">/info/compara/species_sets/:method</a> with one of the methods listed above to obtain a valid list of group names.
        default=__VAR(compara_species_set_group)__
	example=mammals, amniotes, fish, sauropsids, murinae
      </species_set_group>
      <species_set>
        type=String
	description=The set of species used to define the pairwise alignment (multiple values). Should not be used with the species_set_group parameter. Use <a href="/documentation/info/compara_species_sets">/info/compara/species_sets/:method</a> with one of the methods listed above to obtain a valid list of species sets. Any valid alias may be used.
	example=homo_sapiens
	example=mus_musculus
      </species_set>
      <method>
        type=Enum(EPO, EPO_EXTENDED, PECAN, LASTZ_NET, BLASTZ_NET, TRANSLATED_BLAT_NET, CACTUS_HAL, CACTUS_HAL_PW)
	description=The alignment method
	default=__VAR(compara_method)__
	example=PECAN
      </method>
      <display_species_set>
        type=String
        description= Subset of species in the alignment to be displayed (multiple values). All the species in the alignment will be displayed if this is not set. Any valid alias may be used.
	example=human
	example=chimp
	example=gorilla
      </display_species_set>
      <compact>
        type=Boolean
	description= Applicable to EPO_EXTENDED alignments. If true, concatenate the extended species sequences together to create a single sequence. Otherwise, separates out all sequences.
	default=__VAR(compara_compact)__
      </compact>
    </params>
    <examples>
      <basic>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_region)__
        content=application/json
	<params>
	  species_set_group=__VAR(genomic_alignment_group)__
        </params>
      </basic>
      <basic_xml>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_region)__
        content=text/x-phyloxml
	<params>
	  species_set_group=__VAR(genomic_alignment_group)__
        </params>
      </basic_xml>
      <json>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_pw_region)__
        content=application/json
  <params>
    method=__VAR(genomic_alignment_pw_method)__
    species_set=__VAR(genomic_alignment_species)__
    species_set=__VAR(genomic_alignment_species2)__
        </params>
      </json>
    </examples>
  </genomic_alignment_region>
  <cafe_tree>
    description=Retrieves a cafe tree of the gene tree using the gene tree stable identifier
    endpoint=cafe/genetree/id/:id
    method=GET
    group=Comparative Genomics
    output=nh
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl genetree ID
        example=__VAR(genetree_stable_id)__
        required=1
      </id>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <nh_format>
        type=String
        description=The format of a NH (New Hampshire) request. Available only with the default setting to allow us to return the cafe tree with Taxa names appended with number of members and the p_value. example : homo_sapiens_3_0.123 where 3 is the number of members and 0.123 is the p value
        default=Preset with default cafe parameters
      </nh_format>
    </params>
    <examples>
      <nh>
        path=/cafe/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=text/x-nh
        <params>
          nh_format=simple
        </params>
      </nh>
      <json>
        path=/cafe/genetree/id/
        capture=__VAR(genetree_stable_id)__
        content=application/json
      </json>
    </examples>
  </cafe_tree>
  <cafe_tree_member_id>
    description=Retrieves the cafe tree of the gene tree that contains the gene / transcript / translation stable identifier
    endpoint=cafe/genetree/member/id/:id
    method=GET
    group=Comparative Genomics
    output=nh
    output=json
    <params>
      <id>
        type=String
        description=An Ensembl stable ID
        example=__VAR(compara_gene_stable_id)__
        required=1
      </id>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
      </species>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        example=core
      </db_type>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <nh_format>
        description=The format of a NH (New Hampshire) request. Available only with the default setting to allow us to return the cafe tree with Taxa names appended with number of members and the p_value. example : homo_sapiens_3_0.123 where 3 is the number of members and 0.123 is the p value
        default=Preset with default cafe parameters
      </nh_format>
    </params>
    <examples>
      <nh>
        path=/cafe/genetree/member/id/
        capture=__VAR(gene_stable_id)__
        content=text/x-nh
        <params>
          nh_format=simple
        </params>
      </nh>
      <json>
        path=/cafe/genetree/member/id/
        capture=__VAR(gene_stable_id)__
        content=application/json
      </json>
    </examples>
  </cafe_tree_member_id>
  <cafe_tree_member_symbol>
    description=Retrieves the cafe tree of the gene tree that contains the gene identified by a symbol
    endpoint=cafe/genetree/member/symbol/:species/:symbol
    method=GET
    group=Comparative Genomics
    output=nh
    output=json
    <params>
      <symbol>
        type=String
        description=Symbol or display name of a gene
        example=__VAR(gene_symbol)__
        required=1
      </symbol>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <db_type>
        type=String
        description=Restrict the search to a database other than the default. Useful if you need to use a DB other than core
        default=core
        example=core
        example=otherfeatures
      </db_type>
      <external_db>
        type=String
        description=Filter by external database
        example=__VAR(gene_symbol_db)__
      </external_db>
      <object_type>
        type=String
        description=Filter by feature type
        example=gene
        example=transcript
      </object_type>
      <compara>
        type=String
        description=Name of the compara database to use. Multiple comparas exist on a server for separate species divisions
        default=vertebrates
        example=vertebrates
      </compara>
      <nh_format>
        description=The format of a NH (New Hampshire) request. Available only with the default setting to allow us to return the cafe tree with Taxa names appended with number of members and the p_value. example : homo_sapiens_3_0.123 where 3 is the number of members and 0.123 is the p value
        default=Preset with default cafe parameters
      </nh_format>
    </params>
    <examples>
      <nh>
        path=/cafe/genetree/member/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=text/x-nh
        <params>
          nh_format=simple
        </params>
      </nh>
      <json>
        path=/cafe/genetree/member/symbol/
        capture=__VAR(species)__
        capture=__VAR(gene_symbol)__
        content=application/json
      </json>
    </examples>
  </cafe_tree_member_symbol>
</endpoints>
