<endpoints>
  <sequence_id>
    description=Query for multiple types of Sequence by its stable identifier
    endpoint="sequence/id/:id"
    group=Sequences
    method=GET
    output=fasta
    output=json
    output=jsonp
    output=text
    output=yaml
    <params>
      <id>
        type=String
        description=The stable identifier of the entity you wish to retrieve sequence for and an optional inline format. See the parameter format for more information about supported file extensions
        example=__VAR(gene_stable_id)__
        example=__VAR(gene_stable_id)__.fasta (supported on some deployments)
        required=1
      </id>
      <type>
        type=Enum(genomic,cds,cdna,protein)
        description=The type of sequence to retrieve. Used to inform the API of the type of sequence wanted. Defaults to genomic where applicable i.e. not translations. cdna refers to the spliced transcript sequence with UTR and cds refers to the spliced transcript sequence without UTR.
        default=genomic
        example=cds
      </type>
      <species>
        type=String
        description=Registry name/aliases used to restrict searches by. Only required if a stable ID is not unique to a species (not the case with Ensembl databases)
        example=__VAR(species)__
      </species>
      <object_type>
        type=String
        description=Object type to restrict searches by. Only required if a stable ID is not unique to an object class (not the case with Ensembl databases)
        example=gene
      </object_type>
      <db_type>
        type=String
        description=Specify the database type. Only required if a stable ID is not unique to a single database class (not the case with Ensembl databases)
        example=core
      </db_type>
      <format>
        type=Enum(fasta)
        description=Format to retrieve data in. Also the same as the formats supported in the ID
        example=fasta
      </format>
      <mask>
        type=Enum(hard,soft)
        description=Request the sequence masked for repeat sequences. Hard will mask all repeats as N's and soft will mask repeats as lowercased characters. Only available when using genomic
        example=hard
      </mask>
      <expand_5prime>
        type=Int
        description=Expand the sequence upstream of the sequence by this many basepairs. Only available when using type=genomic
        example=1000
      </expand_5prime>
      <expand_3prime>
        type=Int
        description=Expand the sequence downstream of the sequence by this many basepairs. Only available when using type=genomic
        example=1000
      </expand_3prime>
      <multiple_sequences>
        type=Boolean
        description=Allow the service to return more than 1 sequence per identifier. This is useful if you are querying for a gene but are using a type such as protein.
        default=0
      </multiple_sequences>
    </params>
    <examples>
      <basic>
        path=/sequence/id/
        capture=__VAR(gene_stable_id)__
        content=text/plain
      </basic>
      <cdna>
        path=/sequence/id/
        capture=__VAR(transcript_stable_id)__
        <params>
          type=cdna
        </params>
        content=text/x-fasta
      </cdna>
      <cds>
        path=/sequence/id/
        capture=__VAR(transcript_stable_id)__
        <params>
          type=cds
        </params>
        content=text/x-fasta
      </cds>
      <genomic>
        path=/sequence/id/
        capture=__VAR(exon_stable_id)__
        <params>
          type=genomic
        </params>
        content=text/x-fasta
      </genomic>
      <genomic_extend>
        path=/sequence/id/
        capture=__VAR(exon_stable_id)__
        <params>
          type=genomic
          expand_5prime=10
        </params>
        content=text/x-fasta
      </genomic_extend>
      <protein>
        path=/sequence/id/
        capture=__VAR(translation_stable_id)__
        content=application/json
      </protein>
      <ccds>
        path=/sequence/id/
        capture=__VAR(other_features_transcript_stable_id)__
        <params>
          db_type=otherfeatures
          object_type=transcript
          species=__VAR(species_common)__
          type=cds
        </params>
        content=text/x-fasta
      </ccds>
      <prediction>
        path=/sequence/id/
        capture=__VAR(prediction_transcript_stable_id)__
        <params>
          object_type=predictiontranscript
          db_type=core
          type=protein
          species=__VAR(species)__
        </params>
        content=application/json
      </prediction>
      <multiple_sequences>
        path=/sequence/id/
        capture=__VAR(gene_stable_id)__
        <params>
          type=protein
          multiple_sequences=1
        </params>
        content=text/x-seqxml+xml
      </multiple_sequences>
    </examples>
  </sequence_id>
  
  <sequence_region>
    description=Query for a region of genomic sequence based on its location
    endpoint="sequence/region/:species/:region"
    group=Sequences
    method=GET
    output=fasta
    output=json
    output=jsonp
    output=text
    output=yaml
    <params>
      <region>
        type=String
        description=The region to retrieve sequence for. A maximum of 10Mb is allowed to be requested at any one time
        example=__VAR(sequence_region)__
        example=__VAR(sequence_region_negative)__
        example=__VAR(sequence_region_strandless)__
        required=1
      </region>
      <species>
        type=String
        description=Registry name/aliases used to restrict searches by
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <format>
        type=Enum(fasta)
        description=Format to retrieve data in. Also the same as the formats supported in the ID
        example=fasta
      </format>
      <mask>
        type=Enum(hard,soft)
        description=Request the sequence masked for repeat sequences. Hard will mask all repeats as N's and soft will mask repeats as lowercased characters. Only available when using genomic
        example=hard
      </mask>
      <expand_5prime>
        type=Int
        description=Expand the sequence upstream of the sequence by this many basepairs. Only available when using type=genomic
        example=1000
      </expand_5prime>
      <expand_3prime>
        type=Int
        description=Expand the sequence downstream of the sequence by this many basepairs. Only available when using type=genomic
        example=1000
      </expand_3prime>
    </params>
    <examples>
      <basic>
        path=/sequence/region/
        capture=__VAR(species_common)__
        capture=__VAR(sequence_region)__
        content=text/plain
      </basic>
      <negative>
        path=/sequence/region/
        capture=__VAR(species_common)__
        capture=__VAR(sequence_region)__
        content=text/x-fasta
      </negative>
      <json>
        path=/sequence/region/
        capture=__VAR(species_common)__
        capture=__VAR(sequence_region)__
        content=application/json
      </json>
      <extends>
        path=/sequence/region/
        capture=__VAR(species_common)__
        capture=__VAR(sequence_region)__
        <params>
          expand_5prime=60
          expand_3prime=60
        </params>
        content=text/x-fasta
      </extends>
      <masking>
        path=/sequence/region/
        capture=__VAR(species_common)__
        capture=__VAR(sequence_region)__
        <params>
          mask=soft
        </params>
        content=text/x-fasta
      </masking>
    </examples>
  </sequence_region>
</endpoints>