<endpoints>
  <homology_symbol>
    description=Retrieves homology information (orthologs) by symbol
    endpoint=homology/symbol/:species/:symbol
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=orthoxml
    <params>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <symbol>
        type=String
        description=Symbol or display name of a gene
        example=__VAR(gene_symbol_compara37)__
        required=1
      </symbol>
      <external_db>
        type=String
        description=Filter by external database
        example=__VAR(gene_symbol_db)__
      </external_db>
      <format>
        type=Enum(full,condensed)
        description=Layout of the response
        default=__VAR(compara_hom_format)__
      </format>
      <type>
        type=Enum(paralogues, projections, all)
        description=The type of homology to return from this call. Projections are orthology calls defined between alternative assemblies and the genes shared between them. Useful if you need only one type of homology back from the service
        default=__VAR(compara_hom_type)__
      </type>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=__VAR(compara_aligned)__
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=__VAR(compara_sequence)__
      </sequence>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=__VAR(compara_cigar_line)__
      </cigar_line>
    </params>
    <examples>
      <basic>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol_compara37)__
        content=application/json
      </basic>
      <orthoxml>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol_compara37)__
        content=text/x-orthoxml+xml
      </orthoxml>
      <format_xml>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol_compara37)__
        content=text/xml
        <params>
          type=projections
          format=condensed
        </params>
      </format_xml>
      <format_limits>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol_compara37)__
        content=application/json
        <params>
          type=projections
          format=condensed
        </params>
      </format_limits>
      <format_limits_cdna>
        path=/homology/symbol/
        capture=__VAR(species_common)__
        capture=__VAR(gene_symbol_compara37)__
        content=application/json
        <params>
          type=projections
          sequence=cdna
        </params>
      </format_limits_cdna>
    </examples>
  </homology_symbol>
  <homology_ensemblgene>
    description=Retrieves homology information (orthologs) by Ensembl gene id
    endpoint=homology/id/:id
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=orthoxml
    <params>
      <id>
        type=String
        description=An Ensembl stable ID
        example=__VAR(compara_gene_stable_id)__
        required=1
      </id>
      <format>
        type=Enum(full, condensed)
        description=Layout of the response
        default=__VAR(compara_hom_format)__
      </format>
      <type>
        type=Enum(paralogues, projections, all)
        description=The type of homology to return from this call. Projections are orthology calls defined between alternative assemblies and the genes shared between them. Useful if you need only one type of homology back from the service
        default=__VAR(compara_hom_type)__
      </type>
      <aligned>
        type=Boolean
        description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
        default=__VAR(compara_aligned)__
      </aligned>
      <sequence>
        type=Enum(none, cdna, protein)
        description=The type of sequence to bring back. Setting it to none results in no sequence being returned
        default=__VAR(compara_sequence)__
      </sequence>
      <cigar_line>
        type=Boolean
        description=Return the aligned sequence encoded in CIGAR format
        default=__VAR(compara_cigar_line)__
      </cigar_line>
    </params>
    <examples>
      <basic>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=application/json
      </basic>
      <orthoxml>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=text/x-orthoxml+xml
      </orthoxml>
      <compara_xml>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=text/xml
      </compara_xml>
      <format_xml>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=text/xml
        <params>
          type=projections
          format=condensed
        </params>
      </format_xml>
      <orthoxml_limits>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=text/x-orthoxml+xml
        <params>
          type=projections
        </params>
      </orthoxml_limits>
      <format_limits_cdna>
        path=/homology/id/
        capture=__VAR(compara_gene_stable_id)__
        content=application/json
        <params>
          type=projections
          sequence=cdna
        </params>
      </format_limits_cdna>
    </examples>
  </homology_ensemblgene>
   <genomic_alignment_region>
    description=Retrieves genomic alignments as separate blocks based on a region and species
    endpoint=alignment/region/:species/:region
    method=GET
    group=Comparative Genomics
    output=json
    output=xml
    output=phyloxml
    <params>
      <region>
        type=String
        description=Query region. A maximum of 10Mb is allowed to be requested at any one time
        example=__VAR(sequence_region)__
        example=__VAR(sequence_region_negative)__
        example=__VAR(sequence_region_strandless)__
        required=1
      </region>
      <species>
        type=String
        description=Species name/alias
        example=__VAR(species)__
        example=__VAR(species_common)__
        required=1
      </species>
      <aligned>
        type=Boolean
	description=Return the aligned string if true. Otherwise, return the original sequence (no insertions)
	default=__VAR(compara_aligned)__
      </aligned>
      <mask>
        type=Enum(hard,soft)
        description=Request the sequence masked for repeat sequences. Hard will mask all repeats as N's and soft will mask repeats as lowercased characters. 
        example=hard
      </mask> 
      <method>
        type=Enum(LASTZ_PATCH, LASTZ_NET)
	description=The alignment method
	default=__VAR(compara_method)__
	example=LASTZ_PATCH
      </method>
    </params>
    <examples>
      <basic>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_region)__
        content=application/json
      </basic>
      <basic_xml>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_region)__
        content=text/x-phyloxml
      </basic_xml>
      <json>
        path=/alignment/region/
        capture=__VAR(genomic_alignment_species)__
        capture=__VAR(genomic_alignment_pw_region)__
        content=application/json
  	<params>
    	    method=__VAR(genomic_alignment_pw_method)__
        </params>
      </json>
    </examples>
  </genomic_alignment_region>
  </endpoints>
