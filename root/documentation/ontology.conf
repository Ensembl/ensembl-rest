<endpoints>
  <ontology_id>
    description=Search for an ontological term by its namespaced identifier
    endpoint="ontology/id/:id"
    method=GET
    group=Ontologies and Taxonomy
    output=json
    output=xml
    output=yaml
    <params>
      <id>
        type=String
        description=The identifier of the term to search for
        example=__VAR(ontology_term_id)__
        required=1
      </id>
      <relation>
        type=String
        description=The types of relations to retriving both child and parent terms associcated with this term. Fetches all relations by default
        example=is_a
        example=part_of
      </relation>
      <simple>
        type=Boolean
        description=If set the API will avoid the fetching of parent and child terms
        default=0
      </simple>
    </params>
    <examples>
      <one>
        path=/ontology/id/
        capture=__VAR(ontology_term_id)__
        content=application/json
      </one>
    </examples>
  </ontology_id>
  
  <ontology_name>
    description=Search for a list of ontological terms by their name and an optional ontology
    endpoint="ontology/name/:name"
    method=GET
    group=Ontologies and Taxonomy
    output=json
    output=xml
    output=yaml
    <params>
      <name>
        type=String
        description=The name of a term to search for. SQL wildcards are supported
        example=__VAR(go_term_name)__
        required=1
      </name>
      <ontology>
        type=String
        description=The ontology the term name belongs to. Provides a way of eliminating possible dis-ambiguation in term names
        example=__VAR(ontology)__
      </ontology>
      <relation>
        type=String
        description=The types of relations to retriving both child and parent terms associcated with this term. Fetches all relations by default
        example=is_a
        example=part_of
      </relation>
      <simple>
        type=Boolean
        description=If set the API will avoid the fetching of parent and child terms
        default=0
      </simple>
    </params>
    <examples>
      <one>
        path=/ontology/name/
        capture=__VAR(go_term_name)__
        content=application/json
      </one>
    </examples>
  </ontology_name>
  
  <ontology_ancestors>
    description=Find all ancestors, all terms above, belonging to a given term. It is possible to restrict the search to a single ontology so as to help when terms are shared between ontologies e.g. EFO. By default searches are conducted within the namespace of the given identifier
    endpoint="ontology/ancestors/:id"
    method=GET
    group=Ontologies and Taxonomy
    output=json
    output=xml
    output=yaml
    <params>
      <id>
        type=String
        description=The identifier of the term to search for
        example=__VAR(ontology_term_id)__
        required=1
      </id>
      <ontology>
        type=String
        description=The ontology the relations belong to. Used to dis-ambiguate terms which are shared between ontologies such as GO and EFO
        example=__VAR(ontology)__
      </ontology>
    </params>
    <examples>
      <one>
        path=/ontology/ancestors/
        capture=__VAR(ontology_term_id)__
        content=application/json
      </one>
    </examples>
  </ontology_ancestors>
  
  <ontology_descendents>
    description=Find all descendents, all terms below, belonging to a given term. It is possible to restrict the search to a single ontology so as to help when terms are shared between ontologies e.g. EFO. By default searches are conducted within the namespace of the given identifier
    endpoint="ontology/descendents/:id"
    method=GET
    group=Ontologies and Taxonomy
    output=json
    output=xml
    <params>
      <id>
        type=String
        description=The identifier of the term to search for
        example=__VAR(ontology_term_id)__
        required=1
      </id>
      <ontology>
        type=String
        description=The ontology the relations belong to. Used to dis-ambiguate terms which are shared between ontologies such as GO and EFO
        example=__VAR(ontology)__
      </ontology>
      <subset>
        type=String
        description=Specify a subset term to restrict terms by
        example=goslim_generic
        example=goslim_metagenomics
      </subset>
      <closest_term>
        type=Boolean
        description=If true return only the closest terms to the specified term
      </closest_term>
      <zero_distance>
        type=Boolean
        description=Return terms with a distance of 0
      </zero_distance>
    </params>
    <examples>
      <one>
        path=/ontology/descendents/
        capture=__VAR(ontology_term_id)__
        content=application/json
      </one>
    </examples>
  </ontology_descendents>
  
  <ontology_ancestors_chart>
    description=Reconstruct the entire ancestory of a term from is_a and part_of relationships.
    endpoint="ontology/ancestors/chart/:id"
    method=GET
    group=Ontologies and Taxonomy
    output=json
    output=xml
    <params>
      <id>
        type=String
        description=The identifier of the term to search for
        example=__VAR(ontology_term_id)__
        required=1
      </id>
      <ontology>
        type=String
        description=The ontology the relations belong to. Used to dis-ambiguate terms which are shared between ontologies such as GO and EFO
        example=__VAR(ontology)__
      </ontology>
    </params>
    <examples>
      <one>
        path=/ontology/ancestors/chart/
        capture=__VAR(ontology_term_id)__
        content=application/json
      </one>
    </examples>
  </ontology_ancestors_chart>
  
</endpoints>